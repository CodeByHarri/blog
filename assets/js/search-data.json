{
  
    
        "post0": {
            "title": "Volume Profile Visible Range",
            "content": "BTC-USD | % distance from strongest support: -31.67 ETH-USD | % distance from strongest support: -53.61 ADA-USD | % distance from strongest support: -54.37 SOL1-USD | % distance from strongest support: -80.45 MATIC-USD | % distance from strongest support: 4.5 LINK-USD | % distance from strongest support: -27.03 . DAG-USDT | % distance from strongest support: -41.7 LTX-USDT | % distance from strongest support: -81.24 COTI-USDT | % distance from strongest support: -65.47 UTK-BTC | % distance from strongest support: 39.04 OCEAN-BTC | % distance from strongest support: 31.17 ORN-USDT | % distance from strongest support: -10.0 ALEPH-USDT | % distance from strongest support: -17.74 CHR-USDT | % distance from strongest support: -22.71 NOIA-USDT | % distance from strongest support: -32.6 ALBT-USDT | % distance from strongest support: -47.29 UOS-USDT | % distance from strongest support: -46.09 CGG-USDT | % distance from strongest support: -74.46 AVA-USDT | % distance from strongest support: -51.67 SOUL-USDT | % distance from strongest support: -33.81 GOVI-USDT | % distance from strongest support: 68.74 .",
            "url": "https://codebyharri.github.io/blog/finance/blockchain/2021/09/06/Volume_Profile_Visible_Range.html",
            "relUrl": "/finance/blockchain/2021/09/06/Volume_Profile_Visible_Range.html",
            "date": " • Sep 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Volume Profile Visible Range",
            "content": "#@title Imports import pandas as pd import numpy as np from scipy import stats, signal import plotly.express as px import plotly.graph_objects as go import requests import datetime import numpy as np import matplotlib.ticker as ticker import matplotlib.dates as mdates import matplotlib.pyplot as plt import matplotlib as mpl mpl.rcParams[&#39;figure.dpi&#39;] = 300 import seaborn as sns import random sns.set() # !pip install mplfinance # More Plotting libaries # from mplfinance.original_flavor import candlestick_ohlc from matplotlib.pylab import date2num from dateutil.relativedelta import relativedelta # !pip uninstall yfinance # !pip uninstall pandas-datareader # !pip install yfinance --upgrade --no-cache-dir # !pip install pandas-datareader import yfinance as yf . #@title plot def plot(tick,p=182,kk=False): &quot;&quot;&quot; Give a ticker and period in days, the VPVR is plotted and resistant lines are shown &quot;&quot;&quot; ### Data functions if (kk==False): ticker = yf.Ticker(tick) df = ticker.history(period=f&#39;{p}d&#39;,interval=&#39;1d&#39;) cp = df.Close[len(df)-1] elif (kk==True): link = f&#39;https://openapi-v2.kucoin.com/api/v1/market/candles?type=1day&amp;symbol={tick}&#39; r = requests.get(link) df = pd.DataFrame.from_records(r.json()[&#39;data&#39;]) df.columns = [&#39;Time&#39;, &#39;Open&#39;, &#39;Close&#39;, &#39;High&#39;, &#39;Low&#39;, &#39;Volume&#39;, &#39;Turnover&#39;] df[&#39;Time&#39;] = pd.to_datetime(df[&#39;Time&#39;], unit=&#39;s&#39;, errors=&#39;coerce&#39;) df = df.set_index(&#39;Time&#39;) df = df.head(p) for col in df.columns: df[col] = pd.to_numeric(df[col]) cp = df.Close[0] ### Density functions kde_factor = 0.1 num_samples = 500 kde = stats.gaussian_kde(df[&#39;Close&#39;],weights=df[&#39;Volume&#39;],bw_method=kde_factor) xr = np.linspace(df[&#39;Close&#39;].min(),df[&#39;Close&#39;].max(),num_samples) kdy = kde(xr) ticks_per_sample = (xr.max() - xr.min()) / num_samples peaks,peak_props = signal.find_peaks(kdy) pkx1 = xr[peaks] pky1 = kdy[peaks] min_prom = 0 peaks,peak_props = signal.find_peaks(kdy, prominence=min_prom) pkx = xr[peaks] pky = kdy[peaks] left_base = peak_props[&#39;left_bases&#39;] right_base = peak_props[&#39;right_bases&#39;] line_x = pkx line_y0 = pky line_y1 = pky - peak_props[&#39;prominences&#39;] ### Plotting functions sns.set_style(&quot;whitegrid&quot;) plt.style.use(&#39;seaborn-dark-palette&#39;) f, (ax1, ax2) = plt.subplots(1, 2,figsize=(20,5),gridspec_kw={&#39;width_ratios&#39;: [1, 2.5]}, dpi= 300, facecolor=&#39;w&#39;, edgecolor=&#39;k&#39;, sharey=True) ax1.scatter(pky1,pkx1,marker=&#39;&gt;&#39;,color=&#39;#06d6a0&#39;, zorder=10) ax1.plot(kdy,xr,color=&#39;#d62828&#39;) ax1.hist(df[&#39;Close&#39;],weights=df[&#39;Volume&#39;], bins=50, density=True, orientation=&#39;horizontal&#39;, alpha = 0.1) # print(&#39;=&#39;*50) # print(f&#39;{tick}&#39;) proms = [] for x, y0, y1 in zip(pkx, pky, line_y1): ax1.hlines(x,y0,y1, color=&#39;#06d6a0&#39;, alpha=1) proms.append([x,y0-y1]) # print(f&#39;This prominance level at {round(x,2)}:{round(prom,2)}&#39;) # print(&#39;=&#39;*50) #determine the strongest support proms = pd.DataFrame.from_records(proms) print() proms.columns = [&#39;p&#39;,&#39;pp&#39;] sp = proms[proms[&#39;pp&#39;] == proms[&#39;pp&#39;].max()][&#39;p&#39;].reset_index() print(tick,&#39; | % distance from strongest support: &#39;, round(100*((sp[&#39;p&#39;][0]-cp)/cp),2)) # make the lines for the plot nn = pky - line_y1 normalized_y1 = nn / np.sqrt(np.sum(nn**2)) for i, txt in enumerate(pkx1): ax2.annotate(round(txt,2), (df.index[0], pkx1[i])) for x,a in zip(pkx,normalized_y1) : ax2.plot(df.index, [x]*len(df.index), color=&#39;#06d6a0&#39;, alpha= a) #change this normalised if you want gradients ax2.plot(df.index, df[&#39;Close&#39;], alpha = 1) ax1.set_title(f&#39;{tick} Volume Profile Visible Range (p={p}d)&#39;) ax2.set_title(f&#39;{tick} Price&#39;) ax2.set_xlabel(&#39;Date&#39;) ax1.set_xlabel(&#39;Volume profile (partial sums)&#39;) ax1.set_ylabel(&#39;Price $&#39;) . ticks = [&#39;BTC-USD&#39;,&#39;ETH-USD&#39;,&#39;ADA-USD&#39;,&#39;SOL1-USD&#39;,&#39;MATIC-USD&#39;, &#39;LINK-USD&#39;] for tick in ticks: plot(tick, p=365) . BTC-USD | % distance from strongest support: -31.57 ETH-USD | % distance from strongest support: -53.35 ADA-USD | % distance from strongest support: -54.25 SOL1-USD | % distance from strongest support: -79.84 MATIC-USD | % distance from strongest support: 5.56 LINK-USD | % distance from strongest support: -26.58 . ticks = [&#39;NDQ.AX&#39;,&#39;ASIA.AX&#39;,&#39;CLNE.AX&#39;,&#39;IOZ.AX&#39;,&#39;EMN.AX&#39;] for tick in ticks: plot(tick, p=365) . NDQ.AX | % distance from strongest support: -17.56 ASIA.AX | % distance from strongest support: 3.36 CLNE.AX | % distance from strongest support: -4.16 IOZ.AX | % distance from strongest support: -21.55 EMN.AX | % distance from strongest support: 8.55 . KT = [&#39;DAG-USDT&#39;,&#39;LTX-USDT&#39;, &#39;COTI-USDT&#39;, &#39;UTK-BTC&#39;, &#39;OCEAN-BTC&#39;, &#39;ORN-USDT&#39;, &#39;ALEPH-USDT&#39;, &#39;CHR-USDT&#39;, &#39;NOIA-USDT&#39;,&#39;ALBT-USDT&#39;,&#39;UOS-USDT&#39;, &#39;CGG-USDT&#39;, &#39;AVA-USDT&#39;, &#39;SOUL-USDT&#39;, &#39;GOVI-USDT&#39;] . #hide_input for tick in KT: plot(tick, p=140, kk=True) . DAG-USDT | % distance from strongest support: -40.42 LTX-USDT | % distance from strongest support: -80.91 COTI-USDT | % distance from strongest support: -64.11 UTK-BTC | % distance from strongest support: 41.88 OCEAN-BTC | % distance from strongest support: 30.18 ORN-USDT | % distance from strongest support: -15.96 ALEPH-USDT | % distance from strongest support: -20.71 CHR-USDT | % distance from strongest support: -19.85 NOIA-USDT | % distance from strongest support: -32.05 ALBT-USDT | % distance from strongest support: -47.89 UOS-USDT | % distance from strongest support: -44.41 CGG-USDT | % distance from strongest support: -73.68 AVA-USDT | % distance from strongest support: -48.39 SOUL-USDT | % distance from strongest support: -41.82 GOVI-USDT | % distance from strongest support: 71.04 .",
            "url": "https://codebyharri.github.io/blog/finance/blockchain/2021/08/06/Volume-Profile-Visible-Range.html",
            "relUrl": "/finance/blockchain/2021/08/06/Volume-Profile-Visible-Range.html",
            "date": " • Aug 6, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Crypto Portfolio Thought Piece",
            "content": ". Roses are red, violets are blue. This is not financial advice, I genuinely have no clue. Problem Statement . In this markdown I wanted to track two different portfolios. A high risk portfolio of low marketcap cryptocurrencies which I’ve curated based on some fundamental analysis and a large market capital portfolio consisting of Bitcoin, Ethereum and Cardano. The goal of this post is to show the returns of $1000 USD in both portfolios starting the 1st of July 2021. The reason I have not back dated the portfolios to showcase past performance is because ‘would have, should have’. . Methadology . The HIGH-RISK-HIGH-REWARD (HRHR) portfolio contains 6 cryptocurrencies I’ve personally researched and look to have promising value additions in the space (NOT FINANCIAL ADVICE). The index equally splits the capital between the 6 cryptocurrencies and redistribute every 6 months on the 1st of January and 1st of July. The GIANT-CAP portfolio contains 20% Bitcoin, 40% Ethereum and 40% Cardano as a benchmark to compare the returns of the HRHR portfolio. The same redistribution logic applies to this portfolio on the same dates. . Risk . My hypothesis is over a span of 5-10 years the HRHR, portfolio will show signficantly better risk adjusted returns than the GIANT-CAP portfolio. This blog post will be updated at least once a month to show the progress. . HIGH-RISK-HIGH-REWARD . . GIANT-CAP . .",
            "url": "https://codebyharri.github.io/blog/blockchain/2021/07/16/Crypto-Portfolio-Thought-Piece.html",
            "relUrl": "/blockchain/2021/07/16/Crypto-Portfolio-Thought-Piece.html",
            "date": " • Jul 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Crypto Risk Metric",
            "content": "Last Updated: 07/07/2021 . Simply put this tool is used to dynamically dollar cost average your purchases of a crypto. The risk metric is calculated using some stacked machine learning methods featured on my github. The risk is associated with how much you should be allocating. . BTC Risk Metric . How is the risk calculated? . Given the BTCUSD data from Yahoo Finance 8 features are created, listed belowed in the diagram. These 8 features are used to predict the normalised price between local highs and lows. The models used are sklearns Extra Trees, Random Forrest and Linear Regression. This process is optimised using Optuna. . .",
            "url": "https://codebyharri.github.io/blog/blockchain/2021/07/12/Crypto-Risk-Metric.html",
            "relUrl": "/blockchain/2021/07/12/Crypto-Risk-Metric.html",
            "date": " • Jul 12, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Dollar Cost Averaging vs Lump Sum Purchases",
            "content": "The idea behind this notebook is to showcase two strategies of investing into an asset. As an example we&#39;ll invest 10,000 AUD into the ASX top 200 (ASX:IOZ), the NASDAQ 100 (ASX:NDQ), Bitcoin and Ethereum. In the below diagram of ASX:IOZ, the first plot shows the price of IOZ over the past 4 years. The plot below shows the lump sum return on investment in blue. As an example, if you had invested 10,000 AUD on 01-01-2021 you would currently have ~11000 AUD today if you had made a lump sum purchase. The red line shows the return on investment if you had purchased 833.33 AUD every 30 days until you spent your 10,000 AUD capital. As an example, if you had invested your first 833.33 AUD on 01-01-2021, you would have ~10,400 AUD today. .",
            "url": "https://codebyharri.github.io/blog/finance/2021/07/08/Dollar-Cost-Averaging-vs-Lump-Sum-Purchases.html",
            "relUrl": "/finance/2021/07/08/Dollar-Cost-Averaging-vs-Lump-Sum-Purchases.html",
            "date": " • Jul 8, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Observing Returns In Cryptocurrencies",
            "content": "The following plot shows the return on investment (ROI) if you had invested in a cryptocurrency X days ago. For example investing 1500 days ago in BTC would have yielded a ~1000% ROI. The idea of this illustration was to show how long you would have to wait until ROIs are positive. . Similarly to the previous plot, the following plot shows the ROI if you had invested 1, 2 and 3 years ago to that date. For example the ROI of BTC on January 1st 2020 would have been 100% if you had deployed capital 1 year ago and almost -90% if you had deployed capital 2 years ago. The idea of this illustration is show that ROIs over 3 years tend to be more positive. This also highlights the importance of dollar cost averaging over lump sum investments. . In the following plots we obeserve Bitcoin dominance and Altseasons. A rudimentary visualisation to look at breaking out of trends/consolidation periods as well as observing patterns of higher highs and lower lows to trade between. The green and red band is a support band I like to use. It is compromised of the 12 and 26 day exponential moving average cross overs to highlight bull and bear trends on a smaller investment timeframe. The idea of this visualisation is to show the importance of portfolio management during times of volailty as Altcoins tend to bleed harder when BTC drops below its 21 week moving average. .",
            "url": "https://codebyharri.github.io/blog/blockchain/2021/07/04/Observing-Returns-In-Cryptocurrencies.html",
            "relUrl": "/blockchain/2021/07/04/Observing-Returns-In-Cryptocurrencies.html",
            "date": " • Jul 4, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "My ETF Portfolio Holdings",
            "content": "In this notebook I wanted to visualy display 3 ETFs I own and thier underlying holdings. The 3 ETFS include the NASDAQ 100 (ASX:NDQ), Asian technology tigers (ASX:ASIA) and a clean energy index (ASX:CLNE). The colour shows the percentage change of my portfolio. . . . Observing the seasonality of the NASDAQ . Average Return (%) Median Return (%) Standard Deviation (%) Minimum Return (%) Maximum Return (%) Number of Observations . January 2.23% | 2.74% | 6.18% | -9.95% | 13.52% | 37 | . February 0.66% | 0.96% | 6.81% | -22.36% | 18.57% | 37 | . March 0.56% | 1.20% | 5.06% | -13.45% | 12.72% | 37 | . April 1.77% | 1.65% | 6.07% | -14.11% | 19.17% | 37 | . May 1.29% | 2.94% | 5.53% | -13.47% | 10.79% | 37 | . June 0.89% | 0.61% | 4.98% | -9.31% | 14.23% | 37 | . July 0.81% | 1.11% | 5.08% | -8.86% | 10.48% | 38 | . August 0.13% | 1.32% | 6.35% | -19.81% | 11.84% | 36 | . September -0.58% | 0.40% | 6.55% | -16.84% | 12.25% | 36 | . October 0.71% | 2.68% | 8.07% | -27.54% | 13.33% | 36 | . November 1.87% | 1.91% | 6.84% | -21.67% | 13.20% | 36 | . December 1.80% | 1.33% | 6.06% | -11.43% | 21.80% | 36 | .",
            "url": "https://codebyharri.github.io/blog/finance/2021/07/01/My-ETF-Portfolio-Holdings.html",
            "relUrl": "/finance/2021/07/01/My-ETF-Portfolio-Holdings.html",
            "date": " • Jul 1, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey! If you’re looking to get to know me, send me a message on linkedin. .",
          "url": "https://codebyharri.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://codebyharri.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}